package eu.darkbot.api.managers;

import eu.darkbot.api.API;
import eu.darkbot.api.PluginAPI;
import eu.darkbot.api.events.Event;
import eu.darkbot.api.events.Listener;

/**
 * An API made to send and receive events generated by the bot,
 * whenever certain things occur, either in the bot or in-game.
 *
 * To listen in for events, make your class implement {@link Listener}
 * and have one or several methods with an {@link eu.darkbot.api.events.EventHandler}
 * annotation, and a single parameter that is of the type
 * of events you want to listen to.
 *
 * @see Listener
 * @see eu.darkbot.api.events.EventHandler
 * @see Event
 *
 */
public interface EventSenderAPI extends API.Singleton {

    /**
     * Send an event to all the currently registered events
     * @param object The event to send to all listeners
     */
    void sendEvent(Event object);

    /**
     * Register all the event handler methods in the listener.
     *
     * When this is invoked, all methods in the {@param listener}
     * annotated with {@link eu.darkbot.api.events.EventHandler}
     * will be registered to be called whenever an event
     * of that type is sent via {@link #sendEvent(Event)}
     *
     * You typically will want to call this in your {@link eu.darkbot.api.extensions.Installable#install(PluginAPI)} method.
     * For the feature to be able to unload, you *MUST* call
     * {@link #unregisterListener(Listener)} when done listening.
     *
     * @param listener the listener provided
     */
    void registerListener(Listener listener);

    /**
     * Unregister all the event handler methods in the listener
     *
     * This MUST be called when unloading a feature, otherwise
     * it can't be GCd and WILL generate memory leaks.
     *
     * You must call this in your {@link eu.darkbot.api.extensions.Installable#install(PluginAPI)} method.
     *
     * @param listener the listener to unregister
     */
    void unregisterListener(Listener listener);

}
